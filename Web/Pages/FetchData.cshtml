@page "/fetchdata"
@inject HttpClient Http
@using SharedCode

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>
<div>
    @if (dayEvents == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @*<p>first: @customerName.FirstName</p>
        <p>middle: @customerName.MiddleInitial</p>
        <p>third: @customerName.LastName</p>*@

        <p>first: @customerName2.FirstName</p>
        <p>middle: @customerName2.MiddleInitial</p>
        <p>third: @customerName2.LastName</p>

        foreach (var dayEvent in dayEvents)
        {
            <div>
                <table class="table">
                    <tbody>
                        <tr><td>Name</td><td>@dayEvent.Name</td></tr>
                        <tr><td>Session submission opens</td>  <td>@FormatDate(dayEvent.SessionSubmissionOpens)</td></tr>
                        <tr><td>Session submission closes</td> <td>@FormatDate(dayEvent.SessionSubmissionCloses)</td></tr>
                        <tr><td>Session voting opens</td>      <td>@FormatDate(dayEvent.SessionVotingOpens)</td></tr>
                        <tr><td>Session voting closes</td>     <td>@FormatDate(dayEvent.SessionVotingCloses)</td></tr>
                        <tr><td>Agenda announced</td>          <td>@FormatDate(dayEvent.AgendaAnnounced)</td></tr>
                        <tr><td>Registration opens</td>        <td>@FormatDate(dayEvent.RegistrationOpens)</td></tr>
                    </tbody>
                </table>
            </div>
        }
    }
</div>

@functions {
    DayEvent[] dayEvents;
    DDDEvents.CustomerName customerName;
    DDDEvents.CustomerName2 customerName2;

    protected override async Task OnInitAsync()
    {
        dayEvents = await Http.GetJsonAsync<DayEvent[]>("data/ddd.json");

        //customerName = await Http.GetJsonAsync<DDDEvents.CustomerName>("data/customer.json");
        customerName2 = await Http.GetJsonAsync<DDDEvents.CustomerName2>("data/customer.json");

    }

    protected string FormatDate(DateTime? date)
    {
        if (date.HasValue)
        {
            return date.Value.ToShortDateString();
        }
        else
        {
            return "";
        }
    }

    class DayEvent
    {
        public string Name { get; set; }
        public DateTime? SessionSubmissionOpens { get; set; }
        public DateTime? SessionSubmissionCloses { get; set; }
        public DateTime? SessionVotingOpens { get; set; }
        public DateTime? SessionVotingCloses { get; set; }
        public DateTime? AgendaAnnounced { get; set; }
        public DateTime? RegistrationOpens { get; set; }
        public string Region { get; set; }
        public string Area { get; set; }
    }
}
